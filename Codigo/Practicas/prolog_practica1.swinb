<div class="notebook">

<div class="nb-cell html" name="htm1">
<h3>PROGRAMACIÓN LÓGICA</h3>
<h4>3º GRADO EN INGENIERÍA INFORMÁTICA, URJC</h4>
<h4><strong> PRÁCTICA DE PROLOG Nº1: Primeros contactos con el lenguaje </strong></h4>
© 2022 Ana Pradera Gómez.
 Algunos derechos reservados. 
Este documento se distribuye bajo la licencia  
<a href="https://creativecommons.org/licenses/by-sa/4.0/deed.es">Atribución-CompartirIgual 4.0 Internacional de Creative Commons</a>.
</div>

<div class="nb-cell html" name="htm8">
<strong>Prerrequisitos</strong><br>

Para la realización de esta primera práctica de Programación Lógica es 
conveniente haber leı́do y estudiado el tema PL1 (Introducción a la Programación Lógica) y
los apartados 1,2 y 3 del tema PL2 (El lenguaje Prolog: aspectos básicos), 
en los que se describen las caracterı́sticas generales del lenguaje Prolog
ası́ como su sintaxis y semántica.
</div>

<div class="nb-cell html" name="htm5">
<h4><strong> 1. Suma de números naturales con lógica "pura"</strong></h4>


Considere el predicado lógico "puro" (implementado sin usar la aritmética del lenguaje)
para la 
suma de números naturales 
discutido en los apuntes, <code>"suma/3"</code>, cuya implementación,
precedida de comentarios (líneas que empiezan con 
el símbolo <code>%</code>) se recuerda a continuación:
</div>

<div class="nb-cell program" data-background="true" name="p1">
% suma(?X, ?Y, ?Z)
% cierto si Z es la suma de X e Y.
% programa lógico puro (no utiliza la aritmética de Prolog)

% Caso base: 
% "Para cualquier X, la suma de X con 0 es X."
% Con la notación aritmética estándar: X+0 = X.

suma(X,0,X).

% Caso recursivo: 
% "Para cualesquiera X,Y,Z, si Z es la suma de X e Y, entonces
% s(Z) es la suma de X y s(Y)"
% o, equivalentemente,
% "Para cualesquiera X,Y,Z, la suma de X con s(Y) es s(Z), 
% siempre que Z sea la suma de X con Y."
% Con la notación aritmética estándar: X+Y=Z =&gt; X+(Y+1) = Z+1.

suma(X,s(Y),s(Z)) :- 
    suma(X,Y,Z).
</div>

<div class="nb-cell html" name="htm58">
<h5> <strong>1.1. Algunos errores sintácticos y semánticos típicos </strong></h5>
</div>

<div class="nb-cell html" name="htm59">
A continuación se recuerdan, ilustrándolos con el código de <code>suma/3</code>,
dos de los errores sintácticos típicos:<br><br>

<ul>
  <li> Incluir espacios en blanco entre el nombre del predicado y el paréntesis que 
    viene a continuación. <br>
    
    Por ejemplo, escribir <code>suma (X,0,X).</code> en lugar de 
    <code>suma(X,0,X).</code> produciría un error sintáctico. </li>
 <li>Olvidar que todo hecho y toda regla de un programa terminan necesariamente con un punto.
  Por ejemplo, escribir <code>suma(X,0,X)</code> en lugar de 
    <code>suma(X,0,X).</code> produciría un error sintáctico.</li>
</ul>

Otro error típico, esta vez semántico, se produce al equivocarse al teclear el nombre de una variable.
Por ejemplo, si al escribir la primera línea del programa anterior se 
introduce por error una C 
en lugar de una X, escribiendo <code>suma(X,0,C).</code>, el intérprete producirá 
el aviso <code> Singleton variables: [X,C]</code>. En este caso no se trata de un error sintáctico 
sino semántico: el código se puede ejecutar pero no funcionará correctamente, puesto que la suma de un X dado con 0 no es igual a 
cualquier valor C, sino que es igual al valor X de partida.<br><br>

Pruebe las consecuencias que tendrían estos errores introduciéndolos, 
uno por uno, en el código dado más arriba y haciendo cada vez
alguna consulta, como la que se propone a continuación (que debe tener
como única respuesta <code>Cuanto=0</code>), para forzar
que el código de <code>suma/3</code> sea interpretado por Prolog.
</div>

<div class="nb-cell query" name="q56">
suma(0,0,Cuanto).
</div>

<div class="nb-cell html" name="htm60">
No olvide dejar el código sin errores sintácticos ni semánticos puesto que se va a utilizar a continuación.
</div>

<div class="nb-cell html" name="htm61">
<h5> <strong>1.2. Realización de algunas consultas </strong></h5>
</div>

<div class="nb-cell html" name="htm3">
En lo que sigue se practica con el uso del predicado <code>suma/3</code> 
propuesto más arriba. Recuerde que la implementación está basada en 
programación lógica “pura”, sin utilizar la aritmética de Prolog, y que 
por lo tanto los números naturales deben representarse mediante la 
constante 0 (cero) y los términos compuestos s(0) (uno), s(s(0)) (dos), 
s(s(s(0))) (tres), etc. Si intenta utilizar el predicado suma de forma
distinta, haciendo por ejemplo la consulta
?- suma(1, 2, X).
verá que el resultado es false. (En efecto, como se estudiará más adelante, la consulta anterior 
no unifica -"casa"- con la cabeza de
ninguna de las dos cláusulas que conforman el programa, puesto que la constante 2 no
unifica ni con la constante 0 ni con el término compuesto s(Y)).
</div>

<div class="nb-cell html" name="htm63">
Antes de ejecutar las consultas que se proporcionan a continuación,
indique qué se pretende averiguar con ellas (puede escribir en los espacios 
marcados con ...) y qué respuesta(s) cree
que deberían producir. Por ejemplo:
</div>

<div class="nb-cell html" name="htm64">
consulta 1: ¿Existen naturales X que sean la suma de 1 más 1? ¿Cuáles? Respuesta esperada: X=s(s(0))
</div>

<div class="nb-cell query" name="q57">
suma(s(0), s(0), X).
</div>

<div class="nb-cell html" name="htm66">
consulta 2: ¿Existen naturales Y tal que sumado a 1 de como resultado 3 (La resta de 3-1)? ¿Cuáles? Respuesta esperada: Y=s(s(0))
</div>

<div class="nb-cell query" name="q58">
suma(s(0), Y, s(s(s(0)))).
</div>

<div class="nb-cell html" name="htm67">
consulta 3: ¿Existen naturales cualesquiera tal que sumado a 1 de como resultado 3? Respuesta esperada: true
</div>

<div class="nb-cell query" name="q59">
suma(s(0), _, s(s(s(0)))).
</div>

<div class="nb-cell html" name="htm68">
Observe la diferencia en las respuestas a las dos últimas consultas, debida al uso de 
la <strong>variable anónima</strong>, <code>_</code>, en la segunda.
</div>

<div class="nb-cell html" name="htm69">
consulta 4: ¿Exiten pares de naturales X, Y tal que sumados den como resultado 3? ¿Cuales? Respuesta esperada:
X=s(s(s(0))),Y=0;
X=s(s(0)),Y=s(0);
X=s(0),Y=s(s(0));
X=0,Y=s(s(s(0)));
</div>

<div class="nb-cell query" name="q60">
suma(X, Y, s(s(s(0)))).
</div>

<div class="nb-cell html" name="htm70">
consulta 5: ¿Hay un natural que sudamdo consigo mismo de como resultado 3? ¿Cuales? Respuesta esperada: false
</div>

<div class="nb-cell query" name="q61">
suma(X, X, s(s(s(0)))).
</div>

<div class="nb-cell html" name="htm71">
consulta 6: ¿Existe algún natural X que sumado con cualquier otro de como resultado 3? ¿Cuales? Resultado esperado:
X=s(s(s(0)));
X=s(s(0));
X=s(0); 
X=0;
</div>

<div class="nb-cell query" name="q62">
suma(X, _, s(s(s(0)))).
</div>

<div class="nb-cell html" name="htm72">
Pruebe ahora el ejercicio inverso: escriba y ejecute las consultas en Prolog asociadas
con las descripciones dadas.
</div>

<div class="nb-cell html" name="htm73">
consulta 7: ¿existe algún natural tal que sumado consigo mismo da s(s(0)) 
(es decir, dos)? ¿Cuál(es)?
</div>

<div class="nb-cell query" name="q63">
suma(X, X, s(s(0))).
</div>

<div class="nb-cell html" name="htm74">
consulta 8: ¿existe algún natural tal que sumado consigo mismo da s(s(s(0))) (es decir, tres)? ¿Cuál(es)?
</div>

<div class="nb-cell query" name="q64">
suma(X, X, s(s(s(0)))).
</div>

<div class="nb-cell html" name="htm75">
consulta 9: ¿Hay naturales menores o iguales que s(s(s(0)))? ¿Cuál(es)? <br>

Pista: X es menor o igual que s(s(s(0))) si existe un natural Z tal 
que X+Z=s(s(s(0))).
</div>

<div class="nb-cell query" name="q65">
suma(X, X, s(s(s(0)))).
</div>

<div class="nb-cell html" name="htm76">
consulta 10: ¿Hay naturales estrictamente menores que s(s(s(0)))? ¿Cuál(es)? <br>

Pista: X es estrictamente menor que s(s(s(0))) si existe un natural Z 
<em>no nulo</em>
tal que X+Z=s(s(s(0))).
</div>

<div class="nb-cell query" name="q66">
suma(X, s(_), s(s(s(0)))).
</div>

<div class="nb-cell html" name="htm77">
<h5> <strong>1.3. Uso de <code>suma/3</code> para implementar otros predicados </strong></h5>

Utilice exclusivamente el predicado <code>suma/3</code> para 
implementar los dos siguientes predicados lógicos puros. Inspírese para ello
en las cuatro últimas consultas del apartado anterior. A continuación, pruebe su 
funcionamiento mediante consultas adecuadas (al menos tres consultas para
cada uno de ellos, variando las condiciones de entrada/salida de los argumentos).
</div>

<div class="nb-cell program" data-background="true" name="p14">
% par(?X)
% cierto si X es un natural par
% (predicado lógico puro, sin usar la aritmética de Prolog)
% 
%  INTRODUZCA AQUÍ SU CÓDIGO

par(X) :-
    suma(Y, Y, X).
</div>

<div class="nb-cell html" name="htm78">
Pruebe su código realizando consultas significativas, como por ejemplo: 
¿es 0 par? ¿es s(s(s(0))) par? ¿Existen números pares? ¿Cuáles son?
</div>

<div class="nb-cell query" name="q67">
par(0).
</div>

<div class="nb-cell query" name="q68">
par(s(s(0))).
</div>

<div class="nb-cell query" name="q69">
par(s(1)).
</div>

<div class="nb-cell program" data-background="true" name="p15">
% menorig(?X, ?Y)
% cierto si X e Y son naturales y X es menor o igual que Y
% (predicado lógico puro, sin usar la aritmética de Prolog)
%
%  INTRODUZCA AQUÍ SU CÓDIGO

menorig(X, Y) :-
    suma(X, _, Y).
</div>

<div class="nb-cell html" name="htm79">
Pruebe su código realizando consultas significativas:
</div>

<div class="nb-cell query" name="q70">
menorig(s(0), s(s(0))).
</div>

<div class="nb-cell query" name="q71">
menorig(s(s(0)), s(s(0))).
</div>

<div class="nb-cell query" name="q72">
menorig(s(s(0)), s(0)).
</div>

<div class="nb-cell html" name="htm24">
<h4><strong> 2. Genealogía</strong></h4>

Uno de los ejemplos más habituales para iniciarse en el manejo del 
lenguaje Prolog es el de las relaciones familiares.
A continuación se facilita la implementación
de algunos predicados básicos, y se pide la implementación de otros. 
Eche un vistazo al siguiente programa y continúe leyendo.
</div>

<div class="nb-cell program" data-background="true" name="p2">
% PREDICADOS BÁSICOS

% progenitor(?X, ?Y)
% Cierto si X es progenitor (madre o padre) de Y
progenitor(pepa, pepe1).
progenitor(pepe, pepe1).
progenitor(pepe, pepa2).
progenitor(pepe1, pepa11).
progenitor(pepe1, pepa12).
progenitor(pepa12, pepe121).

% mujer(?X)
% Cierto si X es una mujer
mujer(pepa).
mujer(pepa2).
mujer(pepa11).
mujer(pepa12).

% varon(?X)
% Cierto si X es un varón
varon(pepe).
varon(pepe1).
varon(pepe121).
</div>

<div class="nb-cell html" name="htm26">
<h5> <strong>2.1. Realización de algunas consultas </strong></h5>
Utilice exclusivamente los predicados <code>progenitor</code>, 
<code>mujer</code> y <code>varon</code> para realizar las consultas
que se indican a continuación:
</div>

<div class="nb-cell html" name="htm25">
¿Es pepa la madre de pepa2?
</div>

<div class="nb-cell query" name="q25">
progenitor(mujer(pepa), pepa2)
</div>

<div class="nb-cell html" name="htm27">
¿Quiénes son los progenitores de pepe1?
</div>

<div class="nb-cell query" name="q26">
progenitor(X, pepe1).
</div>

<div class="nb-cell html" name="htm28">
¿Quién es la madre de pepe1?
</div>

<div class="nb-cell query" name="q27">
progenitor(X, pepe1), mujer(X).
</div>

<div class="nb-cell html" name="htm29">
¿Tiene pepe1 hijos varones? ¿Quién o quiénes son?
</div>

<div class="nb-cell query" name="q28">
progenitor(pepe1, X), varon(X).
</div>

<div class="nb-cell html" name="htm30">
¿Quiénes son mujeres?
</div>

<div class="nb-cell query" name="q29">
mujer(X).
</div>

<div class="nb-cell html" name="htm31">
¿Tiene pepa alguna nieta? ¿Quién o quiénes son? OJO: Prolog debe mostrar <em>solo</em> las nietas de pepa, sus progenitores no deben aparecer. Recuerde el uso
de variables <em>semi-anónimas</em> para resolver este tipo de situaciones.
</div>

<div class="nb-cell query" name="q30">
progenitor(pepa, _X), progenitor(_X, Y), mujer(Y).
</div>

<div class="nb-cell html" name="htm32">
¿Quiénes son progenitores comunes de pepa11 y pepa12?
</div>

<div class="nb-cell query" name="q31">
progenitor(X, pepa11), progenitor(X, pepa12).
</div>

<div class="nb-cell html" name="htm56">
¿Tienen pepa11 y pepa12 algún progenitor/a común (no importa quién o quiénes)?
</div>

<div class="nb-cell query" name="q54">
progenitor(_X, pepa11), progenitor(_X, pepa12).
</div>

<div class="nb-cell html" name="htm33">
<h5> <strong>2.2. Implementación de algunos predicados </strong></h5>

Implemente y pruebe con consultas adecuadas los predicados descritos a 
continuación, teniendo en cuenta las indicaciones facilitadas para algunos
de ellos.<br>
</div>

<div class="nb-cell html" name="htm43">
<code>madre(?X,?Y), cierto si X es madre de Y.</code><br>
    
    Este predicado, al igual que los siguientes, debe definirse mediante
*reglas* que sean válidas independientemente del
contenido concreto que tengan los predicados
"progenitor", "mujer" y "varón", y no
mediante hechos que habría que actualizar si cambiasen los
datos. Por ejemplo, una forma, INADECUADA, de definirlo
sería la siguiente:<br>

<pre><code>
% madre(?X,?Y), cierto si X es madre de Y. 
% versión INADECUADA
madre(pepa, pepe1).
madre(pepa12, pepe121).
 </code>
</pre>
  
Esta implementación es correcta respecto a la definición actual
de los predicados "progenitor" y "mujer", pero
podría dejar de serlo si estos cambian.

Una forma adecuada de implementar el predicado
"madre" es hacerlo mediante una *regla* que exprese su definición en
el caso general: para cualesquiera dos personas X e
Y, X será la madre de Y si resulta que X es una mujer y es además
progenitora de Y:

<pre><code>
% madre(?X,?Y), cierto si X es madre de Y.
% versión ADECUADA
    madre(X,Y) :-
    	mujer(X),
        progenitor(X,Y).
 </code>
</pre>

A diferencia de la anterior, esta definición siempre dará la
información correcta independientemente del contenido
concreto de los predicados "progenitor" y "mujer".
</div>

<div class="nb-cell program" data-background="true" name="p6">
% madre(?X,?Y), cierto si X es madre de Y.

%  INTRODUZCA AQUÍ SU CÓDIGO

madre(X, Y) :-
    mujer(X),
    progenitor(X,Y).
</div>

<div class="nb-cell html" name="htm41">
Pruebe ahora su código realizando consultas significativas:
</div>

<div class="nb-cell query" name="q40">
madre(pepa, pepe1).
</div>

<div class="nb-cell query" name="q39">
madre(pepe, pepe1)
</div>

<div class="nb-cell html" name="htm45">
<code>madre(?X), cierto si X es madre.</code><br>
Aunque este predicado tiene mismo nombre que el anterior, se trata de un predicado
distinto (recuerde que Prolog permite sobrecargar los nombres de los predicados,
distinguiendo entre ellos por su número de parámetros). Una persona es madre si es mujer y 
es progenitora de alguien, o, lo que es lo mismo, si es madre de alguien 
(esta segunda posible implementación se basaría en el predicado 
<code>madre/2</code> recién definido). Recuerde el uso de la <em>variable anónima</em> 
para casos como este, en el que no importa quién o quiénes son los hijos.
</div>

<div class="nb-cell program" data-background="true" name="p7">
% madre(?X), cierto si X es madre.

%  INTRODUZCA AQUÍ SU CÓDIGO

madre(X) :-
    madre(X, _).
</div>

<div class="nb-cell html" name="htm47">
Haga a continuación consultas significativas para 
comprobar que su código funciona correctamente.
</div>

<div class="nb-cell query" name="q42">
madre(pepa).
</div>

<div class="nb-cell query" name="q41">
madre(pepa1)
</div>

<div class="nb-cell html" name="htm48">
<code>hija(?X,?Y), cierto si X es hija de Y.</code><br>
</div>

<div class="nb-cell html" name="htm46">

</div>

<div class="nb-cell program" data-background="true" name="p8">
% hija(?X,?Y), cierto si X es una hija de Y.

%  INTRODUZCA AQUÍ SU CÓDIGO

hija(X, Y) :-
    mujer(X),
    progenitor(Y, X).
</div>

<div class="nb-cell query" name="q44">
hija(pepa2, pepe).
</div>

<div class="nb-cell query" name="q43">
hija(pepa, pepa)
</div>

<div class="nb-cell html" name="htm49">
<code>abuelo(?X,?Y), cierto si X es abuelo (varón) de Y.</code><br>
</div>

<div class="nb-cell program" data-background="true" name="p9">
% abuelo(?X,?Y), cierto si X es abuelo (varón) de Y.
% 
%  INTRODUZCA AQUÍ SU CÓDIGO

abuelo(X, Y) :-
    varon(X),
    progenitor(X, Z),
    progenitor(Z, Y).
</div>

<div class="nb-cell query" name="q46">
abuelo(pepe, Y).
</div>

<div class="nb-cell query" name="q45">
abuelo(pepe, pepa11).
</div>

<div class="nb-cell html" name="htm50">
<code>hermana(?X,?Y), cierto si X es hermana de Y.</code><br>
Al implementar este predicado considere que para que dos personas sean
hermanas basta con que tengan un progenitor en común. Tenga en cuenta
además que nadie es hermana de sí misma, es decir, una consulta del
estilo "?- hermana(pepa,pepa)" debe devolver
falso. El comportamiento anterior se puede conseguir usando
adecuadamente el predicado predefinido "X \= Y", cierto
si "X" no unifica con "Y".
</div>

<div class="nb-cell program" data-background="true" name="p10">
% hermana(?X,?Y), cierto si X es hermana de Y.
% 
%  INTRODUZCA AQUÍ SU CÓDIGO

hermana(X, Y) :-
    mujer(X),
    progenitor(Z, X),
    progenitor(Z, Y),
    X \= Y. % Este predicado evita que ambas variables sean iguales.
</div>

<div class="nb-cell query" name="q48">
hermana(X, Y)
</div>

<div class="nb-cell query" name="q47">
hermana(pepe, Y)
</div>

<div class="nb-cell html" name="htm51">
<code>tia(?X,?Y), cierto si X es tía de Y.</code><br>
Para implementar este predicado puede usar el predicado <code>hermana</code>
definido más arriba.
</div>

<div class="nb-cell program" data-background="true" name="p11">
% tia(?X,?Y), cierto si X es tía de Y.
% 
%  INTRODUZCA AQUÍ SU CÓDIGO

tia(X, Y) :-
    mujer(X),
    hermana(X, Z),
    progenitor(Z, Y).
</div>

<div class="nb-cell query" name="q49">
tia(X, pepa11)
</div>

<div class="nb-cell query" name="q50">
tia(X, _)
</div>

<div class="nb-cell html" name="htm52">
<code>ancestro(?X,?Y), cierto si X es un ancestro (mujer o varón) de Y.</code><br>
X es ancestro de Y si está por encima en su línea genealógica, es decir, 
si es progenitor/abuelo/bisabuelo/tatarabuelo/... de Y. Este predicado se
puede definir de forma recursiva como sigue:
<ul>

  <li> Caso base. El caso elemental en el que X es un ancestro de Y es cuando 
    X es progenitor de Y (los padres son los ancestros más cercanos), es decir,
    para cualesquiera X, Y , si X es progenitor/a de Y entonces X es un 
    ancestro de Y . En Prolog, lo anterior da lugar a una regla.
  </li>
  
  <li> Caso recursivo. Para que X sea un ancestro de Y distinto a su 
    progenitor, X tiene que ser progenitor de 
    alguien, pongamos de un cierto Z, y ese Z tiene que ser a su vez un 
    ancestro (aquí está la recursión) de Y. En otras palabras: 
    para cualesquiera personas 
    X, Y, Z, si X es progenitor de Z y 
    Z es un ancestro de Y , entonces X es un ancestro de Y. En Prolog 
    lo anterior se traduce mediante una regla.</li></ul>
</div>

<div class="nb-cell program" data-background="true" name="p12">
% ancestro(?X,?Y), cierto si X es un ancestro (mujer o varón) de Y.
% 
%  INTRODUZCA AQUÍ SU CÓDIGO
%
% CASO BASE: 
ancestro(X,Y) :-
    progenitor(X,Y).

% CASO RECURSIVO:
ancestro(X,Y) :-
    progenitor(X,Z), ancestro(Z,Y).
</div>

<div class="nb-cell query" name="q51">
ancestro(X, pepa12) % Ascendientes de pepa12
</div>

<div class="nb-cell query" name="q52">
ancestro(pepe, Y) % Descendientes de pepe
</div>

<div class="nb-cell html" name="htm53">
<code>pariente(?X,?Y), cierto si X es pariente de Y.</code><br>
Para poder implementar este predicado es
necesario tener claro qué se entiende por ``X es pariente
de Y''. Una posibilidad sería la siguiente: X es
pariente de Y si se da cualquiera de las tres siguientes
condiciones:
<ol>

  <li> X es ancestro de Y (este es el caso en el que X es padre/abuelo/etc, de Y), o bien
  </li> 
  
  <li> Y es
ancestro de X (este es el caso en el que X es hijo/nieto/etc de Y), o bien 
  </li>
  
  <li> X e Y tienen un ancestro
común (este último sería el caso en el que X e Y son hermanos, o primos, etc).
   </li> 
  
</ol>

Esta definición, expresada en Prolog, da lugar a tres
reglas definidas utilizando el predicado <code>ancestro</code> 
implementado más arriba. Tenga en cuenta además que, al igual que en la
definición del predicado "hermana", nadie debería ser
pariente de sí mismo.
</div>

<div class="nb-cell program" data-background="true" name="p13">
% pariente(?X,?Y), cierto si X es un pariente (mujer o varón) de Y.
% 
%  INTRODUZCA AQUÍ SU CÓDIGO
pariente(X,Y) :-
    ancestro(X,Y),
	X \= Y.

pariente(X,Y) :-
    ancestro(Y,X),
    X \= Y.

pariente(X,Y) :-
    ancestro(Z,X), ancestro(Z,Y),
    X \= Y.
</div>

<div class="nb-cell query" name="q1">
pariente(pepe, pepe121)
</div>

<div class="nb-cell query" name="q2">
pariente(pepa11,Y)
</div>

<div class="nb-cell html" name="htm7">
<h4><strong>3. El predicado de unificación </strong></h4>

Las siguientes consultas utilizan el
predicado de unificación de Prolog, <code>"="</code>, y 
el de no unificación, <code>"\="</code>, para saber 
si ciertos pares de expresiones son o no unificables. Para cada una de estas consultas, 
aplique sobre papel el <strong>Algoritmo
de Unificación</strong> estudiado en clase para averiguar cuál será la 
respuesta dada por Prolog, que puede ser <em>false</em> (si la consulta no es cierta), 
<em>true</em> (si la consulta se refiere
al predicado de no unificación <code>"\="</code> y es cierta), o, en otro caso, será el (o uno de ellos si hubiese varios) unificador de 
máxima generalidad que hace cierta la unificación. A continuación compruebe sus respuestas 
ejecutando las consultas mediante el intérprete de Prolog (flecha azul de la derecha).
</div>

<div class="nb-cell query" name="q10">
f(X, g(b,c)) = f(Z, g(Y,c)).
</div>

<div class="nb-cell query" name="q3">
f(X, g(b,c)) = f(Z, g(_Y,c)).
</div>

<div class="nb-cell query" name="q11">
f(X, g(b,c)) \= f(Z, g(Y,c)).
</div>

<div class="nb-cell query" name="q12">
f(X, g(b,X)) = f(c, g(Y,d)).
</div>

<div class="nb-cell query" name="q13">
f(X, g(b,X)) \= f(c, g(Y,d)).
</div>

<div class="nb-cell query" name="q14">
f(X, g(b,c)) = f(c, g(X,c)).
</div>

<div class="nb-cell query" name="q4">
f(_X, g(b,c)) = f(c, g(_X,c)).
</div>

<div class="nb-cell query" name="q5">
f(_, g(b,c)) = f(c, g(_,c)).
</div>

<div class="nb-cell query" name="q15">
p(X, f(Y), g(X)) = p(Z, f(g(a)), g(a)).
</div>

<div class="nb-cell html" name="htm9">
Observe que la respuesta a la consulta anterior incluye <code>X=Z</code> en 
lugar de <code>X=a</code> como daría el algoritmo de unificación estudiado 
en clase, en el que al <em>componer</em> la sustitución <code>{X=Z}</code> con 
<code>{Z=a}</code> se obtiene <code>X=a</code>.
Aunque SWI Prolog no siempre hace explícita esta 
composición de sustituciones, internamente sí que la está haciendo, 
como demuestra la consulta siguiente.
</div>

<div class="nb-cell query" name="q16">
p(X, f(Y), g(X)) = p(Z, f(g(a)), g(a)), X=d.
</div>

<div class="nb-cell html" name="htm10">
En efecto, la respuesta a la consulta anterior es negativa, porque cuando 
Prolog llega a <code>X=d</code> lo que realmente comprueba es <code>a=d</code> 
(porque previamente ha sustituido la X por a).
</div>

<div class="nb-cell query" name="q17">
f(s(s(s(0))),Y,Z) = f(s(X),0,s(X)*Y).
</div>

<div class="nb-cell query" name="q18">
p(X,f(Y)) = p(Y,X).
</div>

<div class="nb-cell html" name="htm11">
La respuesta positiva obtenida en el último ejemplo difiere de la obtenida
aplicando el algoritmo de unificación estudiado. Esto es debido a que el
algoritmo de unificación utilizado por SWI Prolog, por razones de eficiencia, 
<i>no realiza el test de ocurrencia</i>. Lo anterior no es grave porque rara vez
se presentan situaciones en las que este test sea necesario, aunque si lo
fuese SWI Prolog ofrece un predicado de unificación alternativo, 
<code>unify_with_occurs_check/2</code>, que sí que incorpora el test de 
ocurrencia. Puede comprobarlo con la siguiente consulta, igual a la anterior
pero realizando, ahora sí, el test de ocurrencia:
</div>

<div class="nb-cell query" name="q19">
unify_with_occurs_check(p(X,f(Y)), p(Y,X)).
</div>

<div class="nb-cell html" name="htm35">
<h4><strong> 4. El orden importa + uso del depurador</strong></h4>

En los apuntes se ha explicado cómo tanto el orden de las cláusulas en un programa 
como el orden de los predicados en el cuerpo de una regla pueden influir en qué
soluciones se encuentran, en qué orden aparecen y en la terminación o no de las
consultas que se realizan. En este apartado se pretende que experimente con ello y
con el uso del depurador de SWI-Prolog a través del ejemplo dado en los apuntes,
que propone las siguientes cuatro posibles implementaciones para el predicado <code>ancestro(?X,?Y)</code>,
cierto si X es ancestro de Y:
</div>

<div class="nb-cell program" data-background="true" name="p5">
% progenitor_a(?X, ?Y): cierto si X es progenitor/a de Y
progenitor_a(pepa, pepito).
progenitor_a(pepito, pepon).

% ancestro(?X, ?Y): cierto si X es un ancestro de Y
% VERSIÓN 1: caso base en primer lugar, caso recursivo con 
% recursión a la derecha (recursión final o recursión de cola)
ancestro1(X, Y) :-
	progenitor_a(X, Y).
ancestro1(X, Y) :-
	progenitor_a(X, Z),
	ancestro1(Z, Y).

% VERSIÓN 2: caso base en último lugar, caso recursivo con 
% recursión a la derecha (recursión final o recursión de cola)
ancestro2(X, Y) :-
	progenitor_a(X, Z),
	ancestro2(Z, Y).
ancestro2(X, Y) :-
	progenitor_a(X, Y).

% VERSIÓN 3: caso base en primer lugar, caso recursivo con 
% recursión a la izquierda
ancestro3(X, Y) :-
	progenitor_a(X, Y).
ancestro3(X, Y) :-
	ancestro3(Z, Y),
	progenitor_a(X, Z).

% VERSIÓN 4: caso base en último lugar, caso recursivo con 
% recursión a la izquierda
ancestro4(X, Y) :-
	ancestro4(Z, Y),
	progenitor_a(X, Z).
ancestro4(X, Y) :-
	progenitor_a(X, Y).
</div>

<div class="nb-cell html" name="htm34">
Las cuatro versiones anteriores son equivalentes desde un punto
de vista lógico, pero no se comportan igual en Prolog, como
puede comprobar a continuación ejecutando la consulta 
"¿De quién(es) es ancestro pepa?" con cada una de las cuatro 
versiones.
</div>

<div class="nb-cell query" name="q32">
ancestro1(pepa, D).
</div>

<div class="nb-cell query" name="q33">
ancestro2(pepa, D).
</div>

<div class="nb-cell query" name="q34">
ancestro3(pepa, D).
</div>

<div class="nb-cell query" name="q35">
ancestro4(pepa, D).
</div>

<div class="nb-cell html" name="htm36">
Para algunas de las consultas anteriores, compruebe el porqué 
de las respuestas obtenidas construyendo sobre papel los 
árboles de Resolución correspondientes (puede cotejarlos con 
los dibujados en los apuntes) y utilice luego el depurador
de errores para seguir paso a paso la construcción del árbol 
de Resolución por parte de Prolog. Para invocar al depurador 
en SWISH basta con escribir la palabra "trace, ” (con una
coma detrás) antes de la 
consulta y seguir la ejecución con los botones ofrecidos. 
Por ejemplo:
</div>

<div class="nb-cell query" name="q36">
trace, ancestro1(pepa, D).
</div>

<div class="nb-cell query" name="q37">
trace, ancestro3(pepa, D).
</div>

<div class="nb-cell html" name="htm37">
Recuerde por último que no existe una regla universal sobre cómo
ordenar las cláusulas de un programa ni los predicados dentro
del cuerpo de una regla, pero en general son útiles las dos
siguientes recomendaciones:
<ol>
  <li> Casos base primero.
  </li><li> Recursión a la derecha (cuando sea posible).
</li></ol>
La única de las cuatro versiones anteriores que cumple ambas 
recomendaciones es la primera.
</div>

</div>
